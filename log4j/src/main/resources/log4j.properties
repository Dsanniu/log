# 指定的日志级别为trace,使用的appender为console  注意这里一定要修改
log4j.rootLogger = trace,console,file,rollingFile,dailFile
#自定义logger对象设置
# 这个意思就是site.sanniu 打印的日志 是info 并且是file的applender 但是默认是rootLogger ,只是日志级别从trace变为了info
# appender 为file 和 console
log4j.logger.site.sanniu = info,file
# 表示 apache日志对象打印的日志几倍为error
log4j.logger.org.apache = error,file


# ---------------------------------------------------------------------------------------------------
# 指定控制台日志输出的 appender
log4j.appender.console = org.apache.log4j.ConsoleAppender
# 指定消息的格式
# log4j.appender.console.layout = org.apache.log4j.SimpleLayout   ----- 默认的
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n

# -------------------------------------------------------------------------------------------------------

# 日志输出文件
log4j.appender.file = org.apache.log4j.FileAppender
log4j.appender.file.layout = org.apache.log4j.PatternLayout
log4j.appender.file.layout.conversionPattern = %r [%t] %p %c %x - %m%n
#指定日志的保存路径
log4j.appender.file.file = /logs/log4j.log
#指定日志文件的字符集
log4j.appender.file.encoding = UTF-8

# -------------------------------------------------------------------------------------------------------


#按照文件大小进行拆分
log4j.appender.rollingFile = org.apache.log4j.RollingFileAppender
log4j.appender.rollingFile.layout = org.apache.log4j.PatternLayout
log4j.appender.rollingFile.layout.conversionPattern = %r [%t] %p %c %x - %m%n
#指定日志的保存路径
log4j.appender.rollingFile.file = /logs/log4j.log
#指定日志文件的字符集
log4j.appender.rollingFile.encoding = UTF-8
#指定日志文件保存多大需要拆分 字符串类型
log4j.appender.rollingFile.maxFileSize = 1MB
# 执行日志文件的数量 默认为1  超过的话会覆盖之前的
log4j.appender.rollingFile.maxBackpuIndex = 10

# -------------------------------------------------------------------------------------------------------

#按照时间进行拆分
log4j.appender.dailFile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailFile.layout = org.apache.log4j.PatternLayout
log4j.appender.dailFile.layout.conversionPattern = %r [%t] %p %c %x - %m%n
#指定日志的保存路径
log4j.appender.dailFile.file = /logs/log4j.log
#指定日志文件的字符集
log4j.appender.dailFile.encoding = UTF-8
#指定日志拆分的规则  不支持冒号 只能横杠 这是以秒为单位拆分
log4j.appender.dailFile.datePattern = '.'yyyy-MM-dd-HH-mm-ss

# -------------------------------------------------------------------------------------------------------



# %m 输出代码中指定的日志信息
# %p 输出优先级、及 DEBUG 、 INFO 等
# %n 换行符
# %r 输出自应用启动到输出该 log 信息耗费的毫秒数
# %c 输出打印语句所属的类的全名
# %t 输出生产该日志的线程全名
# %d 输出服务器当前时间 默认为 ISO8601 也可以指定格式 %d{ yyyy年MM月dd日 HH:mm:ss }
# %l 输出日志时间发生的位置 包括了吗 线程 及在代码中的行数 如 Test.main(Test.java:10)
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中的行号
# %% 输出一个%字符














<?xml version="1.0" encoding="UTF-8" ?>
<!--
    status:debug 日志框架本身的输出日志级别
    monitorInterval: 自动加载配置文件的间隔时间 不低于5s中 所以说 修改日志配置文件后 无序重启项目 可以热更新
-->
<configuration monitorInterval="5">
<!--
    集中配置属性进行管理
-->
    <properties>
        <property name="LOG_HOME">G:/logs</property>
        <property name="PATTERN">[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c %M %L [%thread] === %m %n</property>
    </properties>
<!--
    日志处理器
-->
    <Appenders>
        <!--控制台输出的appender  target表示输出的类型 颜色不一样 SYSTEM_ERR 是红色的 -->
        <Console name="console" target="SYSTEM_ERR">
            <!--日志的格式 -->
            <PatternLayout pattern="${PATTERN}"/>
        </Console>
        <!--日志文件输出-->
        <File name="file" fileName="${LOG_HOME}/myfile.log">
            <PatternLayout pattern="${PATTERN}"/>
        </File>
        <!--随机读写流的文件输出 性能提高-->
        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/myRandomAccessFile.log">
            <PatternLayout pattern="${PATTERN}"/>
        </RandomAccessFile>
        <!--按照一定的规则拆分日志文件-->
        <RollingFile name="rollingFile" fileName="${LOG_HOME}/myRollingFile.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myRollingFile-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <!--  过滤器 高于level放行-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志消息的格式-->
            <PatternLayout pattern="${PATTERN}"/>
            <!--拆分规则-->
            <Policies>
                <!-- 在系统启动时 触发拆分规则 生成一个新的日志文件-->
                <OnStartupTriggeringPolicy/>
                <!-- 按照文件大小拆分 10MB-->
                <SizeBasedTriggeringPolicy size="10MB"/>
                <!--按照时间节点拆分 规则根据filePattern定义的-->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!--在同一个目录下 文件的个数限定为30  超出进行覆盖  防止文件过多-->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>
    </Appenders>

<!--    Logger定义-->
    <loggers>
<!--        使用rootLogger配置日志级别-->
        <Root level="debug">
<!--            指定日志使用的处理器-->
            <AppenderRef ref="rollingFile"/>
            <AppenderRef ref="console"/>
        </Root>

<!--        日志的异步-->
<!--        自定义异步logger对象
            includeLocation="false" 表示关闭行号信息  影响性能
            additivity="false" 不再继承rootLogger
-->
        <AsyncLogger name="site.sanniu" level="debug" includeLocation="false" additivity="false">
            <AppenderRef  ref="rollingFile" />
            <AppenderRef ref="console"/>
        </AsyncLogger>
    </loggers>
</configuration>